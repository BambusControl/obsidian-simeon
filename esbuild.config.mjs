import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import {sassPlugin} from "esbuild-sass-plugin";
import * as fs from "fs/promises";
import esbuildSvelte from 'esbuild-svelte';
import {sveltePreprocess} from 'svelte-preprocess';

const banner =
    "/* THIS IS A GENERATED/BUNDLED FILE BY ESBUILD see https://github.com/BambusControl/obsidian-simeon for the source */";

const prodBuild = (process.argv[2] === "production");
const once = (process.argv[2] === "once");

const sourceDir = "./src/simeon";
const outputDir = "./dist/simeon";

/* Copy the manifest for working*/
await fs.mkdir(outputDir, {recursive: true});
await fs.copyFile("manifest.json", `${outputDir}/manifest.json`);

const buildOptions = {
    banner: {
        js: banner,
    },
    entryPoints: [
        `${sourceDir}/main.ts`,
        `${sourceDir}/styles.scss`,
    ],
    entryNames: "[name]",
    outdir: outputDir,
    bundle: true,
    external: [
        "obsidian",
        /* Every codemirror import must be listed. */
        "@codemirror/state",
        "@codemirror/view",
        "@codemirror/language",
        ...builtins,
    ],
    format: "cjs",
    target: "ES6",
    logLevel: "info",
    sourcemap: prodBuild ? false : "inline",
    treeShaking: true,
    minify: prodBuild,
    plugins: [
        sassPlugin({
            syntax: "scss",
            style: prodBuild ? "compressed" : "expanded",
        }),
        esbuildSvelte({
            compilerOptions: {css: 'injected'},
            preprocess: sveltePreprocess(),
        }),
    ],
    drop: prodBuild ? ["console"] : []
};

try {
    if (once || prodBuild) {
        await esbuild.build(buildOptions);
    } else {
        await (await esbuild.context(buildOptions)).watch();
    }

} catch {
    process.exit(1);
}
